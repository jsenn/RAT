include("util.jl")

"""
    urnseqi(i, qlarge, qsmall, period, phase=1)

If the given index `i` coincides with the given `phase` and `period`, returns 1
with probability `qlarge`. Otherwise, returns 1 with probability `qsmall`.
"""
function urnseqi(i, qlarge, qsmall, period, phase=1)
    @assert(phase >= 0 && phase <= period)
    phase = phase % period
    return i % period == phase ? bernoulli(qlarge) : bernoulli(qsmall)
end

"""
    urnseq(length, qlarge, qsmall, period, phase)

Returns a random repetitive sequence generated by sampling from 2 Bernoulli
random variables with probabilities `qlarge` and `qsmall`. Every `period` entries,
a 1 appears with probability `qlarge` (otherwise 0). In between, the value is 1
with probability `qsmall`.

See Rhythm and Transforms p. 179-180
"""
function urnseq(length, qlarge, qsmall, period, phase=1)
    return [urnseqi(i, qlarge, qsmall, period, phase) for i=1:length]
end

function urnseq_ll(seq, qlarge, qsmall, period, phase)
    phase = phase % period

    num_ones_large = 0
    num_zeros_large = 0
    num_ones_small = 0
    num_zeros_small = 0
    for i = 1:lastindex(seq)
        if i % period == phase
            if seq[i] == 1
                num_ones_large += 1
            else
                num_zeros_large += 1
            end
        else
            if seq[i] == 1
                num_ones_small += 1
            else
                num_zeros_small += 1
            end
        end
    end

    # Since the larges and smalls are repeated Bernoulli trials, the
    # probability of observing n 1s and m 0s is p^n(1-p)^m, where p
    # is either `qlarge` or `qsmall`, respectively. Since the larges
    # and smalls are assumed independent, the overall probability of
    # observing `seq` is obtained by multiplying the terms together.
    # The log of each term is of the form nlog(p) + mlog(1-p).
    function ll(p, num_ones, num_zeros)
        return num_ones*log(p) + num_zeros*log(1-p)
    end

    ll_large = ll(qlarge, num_ones_large, num_zeros_large)
    ll_small = ll(qsmall, num_ones_small, num_zeros_small)

    return ll_large + ll_small
end